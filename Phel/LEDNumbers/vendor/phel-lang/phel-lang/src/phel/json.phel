(ns phel\json
  (:use \JsonException))

(defn valid-key?
  "Checks if `v` is a valid JSON key or can be converted to a JSON key."
  [v]
  (or (int? v) (float? v) (symbol? v) (keyword? v) (string? v)))

(declare encode-value [x])

(defn- encode-value-iterable [x]
  (let [arr (php/array)]
    (foreach [k v x]
      (when-not (valid-key? k)
        (throw (php/new JsonException "Key can only be an integer, float, symbol, keyword or a string.")))
      (php/aset arr (encode-value k) (encode-value v)))
    arr))

(defn encode-value
  "Convert a Phel data type to a 'json compatible' value."
  [x]
  (cond
    (php/is_iterable x) (encode-value-iterable x)
    (symbol? x) (name x)
    (keyword? x) (name x)
    (float? x) (str x)
    true x))

(defn encode
  "Returns the JSON representation of a value."
  [value & [{:flags flags :depth depth}]]
  (let [flags (or flags 0)
        depth (or depth 512)]
    (when (php/is_resource value) (throw (php/new JsonException "Value can be any type except a resource.")))
    (when-not (int? flags) (throw (php/new JsonException "Flags must be an integer.")))
    (when-not (int? depth) (throw (php/new JsonException "Depth must be an integer.")))
    (when-not (> depth 0) (throw (php/new JsonException "Depth must be greater than zero.")))
    (php/json_encode (encode-value value) flags depth)))

(defn decode-value
  "Convert a json data structure to a 'phel compatible' value."
  [x]
  (cond
    (indexed? x) (for [v :in x] (decode-value v))
    (php-array? x) (let [hashmap (transient {})]
                     (foreach [k v x]
                       (put hashmap (keyword k) (decode-value v)))
                     (persistent hashmap))
    true x))

(defn decode
  "Decodes a JSON string."
  [json & [{:flags flags :depth depth}]]
  (let [flags (or flags 0)
        depth (or depth 512)]
    (when-not (string? json) (throw (php/new JsonException "Json must be a string.")))
    (when-not (int? flags) (throw (php/new JsonException "Flags must be an integer.")))
    (when-not (int? depth) (throw (php/new JsonException "Depth must be an integer.")))
    (when-not (> depth 0) (throw (php/new JsonException "Depth must be greater than zero.")))
    (decode-value (php/json_decode json true depth flags))))
